{"version":3,"sources":["services/history.js","routes/Route.js","pages/Login/index.js","pages/Register/index.js","pages/Planner/index.js","pages/Guest/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","RouteWrapper","Component","component","isPrivate","rest","to","defaultProps","LoginBox","id","React","GuestLogin","props","state","gID","clicked","changeGID","bind","handleSubmit","event","this","setState","target","value","preventDefault","document","getElementById","window","location","href","style","color","className","onSubmit","type","placeholder","onChange","PlannerLogin","user","pass","changeUser","changePass","handleRegister","onClick","Login","RegisterBox","Register","CreateGuest","handleClick","Planner","Guest","GuestView","Routes","path","exact","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c82a358a.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default history;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\n\r\nexport default function RouteWrapper({\r\n    component: Component,\r\n    isPrivate,\r\n    ...rest\r\n    }) {\r\n    const signed = false;\r\n\r\n    /**\r\n     * Redirect user to SignIn page if he tries to access a private route\r\n     * without authentication.\r\n     */\r\n    if (isPrivate && !signed) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    /**\r\n     * Redirect user to Main page if he tries to access a non private route\r\n     * (SignIn or SignUp) after being authenticated.\r\n     */\r\n    if (!isPrivate && signed) {\r\n        return <Redirect to=\"/dashboard\" />;\r\n    }\r\n\r\n    /**\r\n     * If not included on both previous cases, redirect user to the desired route.\r\n     */\r\n    return <Route {...rest} component={Component} />;\r\n}\r\n\r\nRouteWrapper.propTypes = {\r\n    isPrivate: PropTypes.bool,\r\n    component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\r\n};\r\n\r\nRouteWrapper.defaultProps = {\r\n    isPrivate: false\r\n};","import React from 'react';\r\nimport '../../SeatPlanner.css';\r\n\r\n\r\nclass LoginBox extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id = \"wrapperbox\">\r\n                <div id = \"welcome\">\r\n                    <h1>Welcome to Best Fit Seating</h1>\r\n                    <h1>Are you here as an Event Planner or as a Guest?</h1>\r\n                </div>\r\n                <div id = \"loginbox\">\r\n                    <PlannerLogin />\r\n                    <GuestLogin />\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nclass GuestLogin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {gID: '', clicked: 'false'};\r\n\r\n        this.changeGID = this.changeGID.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    changeGID(event) {\r\n        this.setState({gID: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.state.gID !== '') {\r\n            document.getElementById('email').value = '';\r\n            document.getElementById('pass').value = '';\r\n            document.getElementById('guestID').value = '';\r\n            window.location.href = \"guest\";\r\n        } else {\r\n            document.getElementById('guestError').style.color = 'red';\r\n        }\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className='box' id= 'guestLogin'>\r\n                <h2>Login as Guest</h2>\r\n                <form onSubmit= {this.handleSubmit}>\r\n                    <div className='infoBox'>\r\n                        <input type= 'text' className='textBox' id='guestID'\r\n                               placeholder='Unique Guest ID' onChange={this.changeGID} />\r\n                        <div className='loginError' id='guestError'>\r\n                            Invalid Guest ID\r\n                        </div>\r\n                    </div>\r\n                    <input type='submit' className='button' id='guest' value='CONTINUE' />\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nclass PlannerLogin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {user:'', pass:'', clicked: 'false'};\r\n\r\n        this.changeUser = this.changeUser.bind(this);\r\n        this.changePass = this.changePass.bind(this);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    changeUser(event) {\r\n        this.setState({user: event.target.value});\r\n    }\r\n\r\n    changePass(event) {\r\n        this.setState({pass: event.target.value});\r\n    }\r\n\r\n    handleRegister(event) {\r\n        event.preventDefault();\r\n        window.location.href = \"register\";\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.state.user !== '' && this.state.pass !== '') {\r\n            document.getElementById('email').value = '';\r\n            document.getElementById('pass').value = '';\r\n            document.getElementById('guestID').value = '';\r\n            window.location.href = \"planner\";\r\n        } else {\r\n            document.getElementById('plannerError').style.color = 'red';\r\n        }\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className= 'box' id= 'plannerLogin'>\r\n                <h2>Login as Planner</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className='infoBox'>\r\n                        <input type='text' className='textBox' id='email'\r\n                               placeholder='E-mail' onChange={ this.changeUser} />\r\n                        <input type='password' className='textBox' id='pass'\r\n                               placeholder='Password' onChange={this.changePass} />\r\n                        <div className='loginError' id='plannerError'>\r\n                            Invalid Username/Password\r\n                        </div>\r\n                    </div>\r\n                    <div id='newRegister' onClick={this.handleRegister}>\r\n                        New User? Click Here to Register\r\n                    </div>\r\n                    <input type='submit' className='button' id='planner' value='LOGIN' />\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default function Login() {\r\n    return <LoginBox />\r\n}","import React from 'react';\r\nimport '../../SeatPlanner.css';\r\n\r\n\r\nclass RegisterBox extends React.Component {\r\n\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='userMain' id = 'wrapperbox'>\r\n\t\t\t\t<form id='registerBox'>\r\n        \t\t\t<h1 id='registerTitle'>Account Information</h1>\r\n        \t\t\t<div id='inputs'>\r\n          \t\t\t\t<input type='text' className='textBox' id='firstName' placeholder='First Name' />\r\n          \t\t\t\t<input type='text' className='textBox' id='lastName' placeholder='Last Name' />\r\n          \t\t\t\t<input type='text' className='textBox' id='e-mail' placeholder='E-mail Address' />\r\n          \t\t\t\t<input type='password' className='textBox' id='password' placeholder='Password' />\r\n          \t\t\t\t<input type='password' className='textBox' id='re_password' placeholder='Re-Enter Password' />\r\n\t\t\t\t\t</div>\r\n        \t\t\t<input type='submit' className='button' id='newUser' value='Create Account' />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n\r\nexport default function Register() {\r\n\treturn <RegisterBox />\r\n}","import React from 'react';\r\nimport '../../SeatPlanner.css';\r\n\r\nclass CreateGuest extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {clicked: 'false'};\r\n\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\thandleClick(event) {\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"wrapperbox\">\r\n\t\t\t\t<div id = \"welcome\">\r\n\t\t\t\t\t<h1>Welcome to the Planner Page</h1>\r\n\t\t\t\t\t<h1>We are currently working on this page...</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id = \"buttonbox\">\r\n\t\t\t\t\t<input type='submit' className='button' id='add_guest' value='Add Guest' />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n\r\nexport default function Planner() {\r\n\treturn <CreateGuest />\r\n}\r\n","import React from 'react';\r\nimport '../../SeatPlanner.css';\r\n\r\nexport default function Guest() {\r\n    return <GuestView />\r\n}\r\n\r\nclass GuestView extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div id = \"welcome\">\r\n                <h1>Welcome to the Guest Page</h1>\r\n                <h1>We are currently working on this page...</h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport Route from \"./Route\";\r\nimport Login from '../pages/Login';\r\nimport Register from '../pages/Register';\r\nimport Planner from '../pages/Planner';\r\nimport Guest from '../pages/Guest';\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Login} />\r\n            <Route path=\"/register\" component={Register} />\r\n            <Route path=\"/planner\" component={Planner} />\r\n            <Route path=\"/guest\" component={Guest} />\r\n            {/* redirect user to Login page if route does not exist and user is not authenticated */}\r\n            <Route component={Login} />\r\n        </Switch>\r\n    );\r\n}","import React from 'react';\r\nimport { Router } from 'react-router-dom';\r\n\r\nimport history from './services/history';\r\nimport Routes from './routes';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router history={history}>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"mainbox\"));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}